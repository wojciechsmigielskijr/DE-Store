@page "/LoyaltyCards"
@using De_Store.Service.LoyaltyCards.Protos
@using Google.Protobuf.Collections
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core
@using System.ComponentModel.DataAnnotations
@inject LoyaltyCardsCustomerService.LoyaltyCardsCustomerServiceClient loyaltyManager

<PageTitle>Loyalty Cards</PageTitle>

<h1>Loyalty Cards</h1>

@if (loyaltyCards.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Card Type</th>
                <th>Offers</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var l in loyaltyCards)
            {
                <tr @key="@l">
                    <td id="CardID" value="@l.LoyaltyCardID" hidden></td>
                    <td>@l.LoyaltyCardName</td>
                    <td>
                        <table class="table">
                             <thead>
                                <tr>
                                    <th>Offer Type</th>
                                    <th>Offer Description</th>
                                    <th>Offer Cost</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var o in l.LoyaltyOffers)
                                {                                     
                                      <tr class="loyaltyOfferRow">
                                          <td id="offerID" hidden>@o.Id</td>
                                          <td>@o.OfferType</td>
                                          <td>@o.OfferDescription</td>
                                          <td>@o.OfferCost</td>
                                          <td><button @onclick="() => { RemoveOffer(l.LoyaltyCardID, o.Id); }">Remove Offer</button></td>
                                      </tr>                         
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<h2>Add Offers</h2>
<EditForm EditContext="@myCreateOfferContext" OnValidSubmit="@AddOffer">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>Offer Type: <input style="padding-left: 5px; padding-right: 10px" @bind-value="myOfferModel.OfferType"/></label>
    
    <label>Offer Description: <input style="padding-left: 5px; padding-right: 10px" @bind-value="myOfferModel.OfferDescription"/></label>
    
    <label>Offer Cost: <input style="padding-left: 5px; padding-right: 10px" @bind-value="myOfferModel.OfferCost"/></label>
    
    <button type="submit">Create Offer</button>
</EditForm>

<h2>Configure Offers for Loyalty Cards</h2>
    <label>Card Type: 
          <select @onchange="(e) => { newLoyaltyCardID = Convert.ToInt16(e.Value);}">
                  @foreach(var c in loyaltyCards)
                  {
                     <option value="@c.LoyaltyCardID" selected>@c.LoyaltyCardName</option>
                  }
          </select>  
    </label>

    <label>Offer Type: 
          <select @onchange="(e) => { newOfferID = Convert.ToInt16(e.Value);}">

          </select>  
    </label>
                  
    <button type="submit">Assign Offer</button>

<h2>Customers</h2>


@if (customers.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Active</th>
                <th>Loyalty Card Type</th>
                <th>Points</th>
                <th>Loyalty Card Revoked</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in customers)
            {
                <tr @key="@c">
                    <td id="CustomerID" value="@c.CustomerID" hidden></td>
                    <td id="LoyaltyCardID" value="@c.CustomerLoyaltyCardID" hidden></td>
                    <td id="LoyaltyCardTypeID" value="@c.CustomerLoyaltyCardTypeID" hidden></td>
                    <td>@c.CustomerName</td>
                    <td>@c.CustomerAddress</td>
                    <td>@c.CustomerActive</td>
                    <td>@c.LoyaltyCardTypeDescription</td>
                    <td>@c.CustomerLoyaltyCardPoints</td>
                    <td>@if (c.CustomerLoyaltyCardID != null) { <input type="checkbox" @key="c.IsRevoked" checked="@c.IsRevoked"/> } </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Customer> customers = new();
    private List<LoyaltyCard> loyaltyCards = new();
    private List<LoyaltyCardOffer> loyaltyCardOffers = new();
    private int offerID;
    private EditContext? myCreateOfferContext;
    private EditContext? myAddOfferContext;
    private LoyaltyCardOfferModel myOfferModel = new();

    private int newLoyaltyCardID;
    private int newOfferID;


    protected override async Task OnInitializedAsync()
    {
        myCreateOfferContext = new(myOfferModel);
        await GetMyCustomers();
        await GetLoyaltyCards();
    }

    private async Task RemoveOffer(int loyaltyID, int offerID)
    {
        await loyaltyManager.RemoveOfferAsync(new RemoveOfferForLoyaltyCardsRequest() { Loyaltycardid = loyaltyID, Loyaltycardofferid = offerID });
        await GetLoyaltyCards();
        StateHasChanged();
    }

    private async Task AddOffer()
    {
        if (myCreateOfferContext != null && myCreateOfferContext.Validate())
        {
            await loyaltyManager.CreateOfferAsync(new CreateOfferRequest() { OfferType = this.myOfferModel.OfferType, OfferDescription = this.myOfferModel.OfferDescription, OfferCost = this.myOfferModel.OfferCost});
            await Task.CompletedTask;
        }

        return;
    }

    private async Task AddOfferForCard()
    {

    }

    private async Task GetMyCustomers()
    {
        customers.Clear();

        using var myCustomers = loyaltyManager.GetCustomers(new CustomersRequest());

        while (await myCustomers.ResponseStream.MoveNext())
        {
            customers.Add(
                new Customer(myCustomers.ResponseStream.Current.CustomerID,
                myCustomers.ResponseStream.Current.Name,
                myCustomers.ResponseStream.Current.Address,
                myCustomers.ResponseStream.Current.Active,
                myCustomers.ResponseStream.Current.LoyaltyCardID,
                myCustomers.ResponseStream.Current.LoyaltyPoints,
                myCustomers.ResponseStream.Current.LoyaltyCardRevoked,
                myCustomers.ResponseStream.Current.LoyaltyCardTypeID,
                myCustomers.ResponseStream.Current.LoyaltyCardDescription )           
                );
        }

        return;
    }

    private async Task GetLoyaltyCards()
    {
        loyaltyCards.Clear();

        using var myCards = loyaltyManager.GetLoyaltyCards(new GetLoyaltyCardsRequest());

        while (await myCards.ResponseStream.MoveNext())
        {
            LoyaltyCard myNewCard = new LoyaltyCard();
            myNewCard.LoyaltyCardID = myCards.ResponseStream.Current.Loyaltycardid;
            myNewCard.LoyaltyCardName = myCards.ResponseStream.Current.Loyaltycardtype;

            RepeatedField<LoyaltyOffer> loyaltyCardOffers = myCards.ResponseStream.Current.LoyaltyCardOffer;

            List<LoyaltyCardOffer> myOffer = new();

            foreach(LoyaltyOffer lo in loyaltyCardOffers)
            {
                myOffer.Add(new LoyaltyCardOffer(lo.Loyaltycardofferid, lo.Offertype, lo.Offerdescription, lo.Offercost));                
            }

            myNewCard.LoyaltyOffers = myOffer;     

            loyaltyCards.Add(myNewCard);
        }
    }

    public class Customer
    {
        public Customer(int customerID, string customerName, string customerAddress, bool customerActive, int? customerLoyaltyCardID, int? customerLoyaltyCardPoints, int? customerLoyaltyCardRevoked, int? customerLoyaltyCardTypeID, string loyaltyCardTypeDescription)
        {
            CustomerID = customerID;
            CustomerName = customerName;
            CustomerAddress = customerAddress;
            CustomerActive = customerActive;
            CustomerLoyaltyCardID = customerLoyaltyCardID;
            CustomerLoyaltyCardPoints = customerLoyaltyCardPoints;
            CustomerLoyaltyCardRevoked = customerLoyaltyCardRevoked;
            CustomerLoyaltyCardTypeID = customerLoyaltyCardTypeID;
            LoyaltyCardTypeDescription = loyaltyCardTypeDescription;

            if (CustomerLoyaltyCardRevoked == 1)
            { IsRevoked = true; }
            else
            { IsRevoked = false; }
        }

        public int CustomerID { get; set; }
        public string CustomerName { get; set; }
        public string CustomerAddress { get; set; }
        public bool CustomerActive { get; set; }
        public int? CustomerLoyaltyCardID { get; set; }
        public int? CustomerLoyaltyCardPoints { get; set; }
        public int? CustomerLoyaltyCardRevoked { get; set; }
        public int? CustomerLoyaltyCardTypeID { get; set; }
        public string LoyaltyCardTypeDescription { get; set; }
        public bool IsRevoked { get; set; }
    }

    public class LoyaltyCard
    {
        public LoyaltyCard(int loyaltyCardID, string loyaltyCardName, List<LoyaltyCardOffer> myOffers)
        {
            LoyaltyCardID = loyaltyCardID;
            LoyaltyCardName = loyaltyCardName;
            LoyaltyOffers = myOffers;
        }

        public LoyaltyCard() { }

        public int LoyaltyCardID { get; set; }
        public string LoyaltyCardName { get; set; }
        public List<LoyaltyCardOffer> LoyaltyOffers { get; set;}
    }

    public class LoyaltyCardOffer
    {
        public LoyaltyCardOffer(int id, string offerType, string offerDescription, int offerCost)
        {
            Id = id;
            OfferType = offerType;
            OfferDescription = offerDescription;
            OfferCost = offerCost;
        }

        public int Id { get; set; }
        public string OfferType { get; set; }
        public string OfferDescription { get; set; }
        public int OfferCost { get; set; }
    }

    public class LoyaltyCardOfferModel
    {
        [Required]
        [StringLength(10, ErrorMessage = "Offer Type is too long.")]
        public string? OfferType { get; set; }
        [Required]
        [StringLength(50, ErrorMessage = "Offer Description is too long.")]
        public string? OfferDescription { get; set; }

        [Range(1, 2000, ErrorMessage = "Offer Cost invalid (1-2000).")]
        public int OfferCost { get; set; }
    }

 }
